services:
  postgres:
    image: postgres:15
    container_name: chat-api-postgres-scaling
    environment:
      POSTGRES_DB: chatapi
      POSTGRES_USER: chatapi_user
      POSTGRES_PASSWORD: testpassword123
      POSTGRES_SHARED_BUFFERS: 512MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 2GB
      POSTGRES_WORK_MEM: 16MB
      POSTGRES_MAINTENANCE_WORK_MEM: 128MB
      POSTGRES_MAX_CONNECTIONS: 1000
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_RANDOM_PAGE_COST: 1.1
    ports:
      - '5434:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U chatapi_user -d chatapi']
      interval: 10s
      timeout: 5s
      retries: 5
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    networks:
      - chat-api-scaling-network

  redis:
    image: redis:7-alpine
    container_name: chat-api-redis-scaling
    ports:
      - '6381:6379'
    command: redis-server --maxmemory 1gb --maxmemory-policy allkeys-lru --save "" --maxclients 10000 --tcp-keepalive 300 --timeout 300
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 512M
    networks:
      - chat-api-scaling-network

  db-migrations:
    build:
      context: .
      dockerfile: Dockerfile.migrations
    container_name: chat-api-migrations
    environment:
      DATABASE_URL: 'postgresql://chatapi_user:testpassword123@postgres:5432/chatapi'
    depends_on:
      postgres:
        condition: service_healthy
    restart: 'no'
    networks:
      - chat-api-scaling-network

  chat-api-1:
    build: .
    container_name: chat-api-1
    ports:
      - '3001:3000'
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: 'postgresql://chatapi_user:testpassword123@postgres:5432/chatapi'
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: 'test-jwt-secret'
      NODE_OPTIONS: '--max-old-space-size=2048 --max-http-header-size=80000'
      UV_THREADPOOL_SIZE: 128
      S3_REGION: 'us-east-1'
      S3_ACCESS_KEY: 'test-key'
      S3_SECRET_KEY: 'test-secret'
      S3_BUCKET: 'test-bucket'
      S3_ENDPOINT: 'http://localhost:9000'
    depends_on:
      db-migrations:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 2.5G
        reservations:
          memory: 512M
    networks:
      - chat-api-scaling-network

  chat-api-2:
    build: .
    container_name: chat-api-2
    ports:
      - '3002:3000'
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: 'postgresql://chatapi_user:testpassword123@postgres:5432/chatapi'
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: 'test-jwt-secret'
      S3_REGION: 'us-east-1'
      S3_ACCESS_KEY: 'test-key'
      S3_SECRET_KEY: 'test-secret'
      S3_BUCKET: 'test-bucket'
      S3_ENDPOINT: 'http://localhost:9000'
    depends_on:
      db-migrations:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - chat-api-scaling-network

  chat-api-3:
    build: .
    container_name: chat-api-3
    ports:
      - '3003:3000'
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: 'postgresql://chatapi_user:testpassword123@postgres:5432/chatapi'
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: 'test-jwt-secret'
      S3_REGION: 'us-east-1'
      S3_ACCESS_KEY: 'test-key'
      S3_SECRET_KEY: 'test-secret'
      S3_BUCKET: 'test-bucket'
      S3_ENDPOINT: 'http://localhost:9000'
    depends_on:
      db-migrations:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - chat-api-scaling-network

  chat-api-4:
    build: .
    container_name: chat-api-4
    ports:
      - '3004:3000'
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: 'postgresql://chatapi_user:testpassword123@postgres:5432/chatapi'
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: 'test-jwt-secret'
      S3_REGION: 'us-east-1'
      S3_ACCESS_KEY: 'test-key'
      S3_SECRET_KEY: 'test-secret'
      S3_BUCKET: 'test-bucket'
      S3_ENDPOINT: 'http://localhost:9000'
    depends_on:
      db-migrations:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - chat-api-scaling-network

  load-balancer:
    image: haproxy:2.8-alpine
    container_name: chat-api-loadbalancer
    ports:
      - '8080:80'
      - '8404:8404'
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - chat-api-1
    networks:
      - chat-api-scaling-network

volumes:
  postgres_data:

networks:
  chat-api-scaling-network:
    driver: bridge
